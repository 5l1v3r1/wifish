#!/bin/sh
: ${AWK_LOCATION:="/var/lib/wifish"}
if [ ! -r "${AWK_LOCATION}"/wscanparse.awk ];then
	echo "WARNING: Unable to find wscanparse.awk at ${AWK_LOCATION}, trying in ./awk" >&2
	AWK_LOCATION=./awk
fi

if [ ! -r "${AWK_LOCATION}"/wscanparse.awk ];then
	echo "FATAL: Unable to find wscanparse.awk in ./awk Please set AWK_LOCATION" >&2
	exit 1
fi

PARSER="${AWK_LOCATION}"/wscanparse.awk
LISTPARSER="${AWK_LOCATION}"/wlistparse.awk

usage() {
cat	<<-HERE
$0 [options] COMMAND [arguments]
  Options:
        -h		This Help

  Commands: 
        list		List Available APs
        connect	<SSID>	Connect to an AP

  Example:
        $0 connect SomeSSID
	HERE
}

list() {
	echo " * Scanning For APs ..."
	if [ -n "$_IN_TEST" ];then
                gawk -f "$PARSER" data/wscan.txt
	else
		wpa_cli scan > /dev/null
		sleep 5
		wpa_cli scan_results|sort -k 3|gawk -f "$PARSER"
	fi
}

save_config() {
	local yesno=""
	echo -n "Do you want to save this connection? (y/N): "
	read yesno
	echo
	echo $yesno|egrep -q '^[Yy]'
	if [ $? -eq 0 ];then
		echo -n "Saving wpa_supplicant config.. "
		wpa_cli save_config|tail -1
	fi
}

scan_hidden() {
	local _tfile=$1
	local _ssid="$2"
	local yesno=""
	cat $_tfile
	printf "WARNING: Cannot find '$_ssid' in scan results, if it's hidden we can continue. Continue? (y/N): "
	read yesno
	echo $yesno|egrep -q '^[Yy]'
	if [ $? -eq 0 ];then
		echo "Ok, your call"
	else
		echo "Ok, Bailing now"
		exit 1
	fi
}

wpa_encrypt() {
	local us="$1"
	local net="$2"
	local psk="$3"
	local res=1
	echo $us|egrep -q 'WPA2-PSK'
	res=$?
	if [ $res -eq 0 ];then
		wpa_cli set_network $net proto WPA2 > /dev/null
	else
		echo $us|egrep -q 'WPA-PSK'
		if [ $? -eq 0 ];then
			wpa_cli set_network $net proto WPA > /dev/null
		fi
	fi

	echo $us|grep -q 'TKIP'
	if [ $? -eq 0 ];then
		wpa_cli set_network $net pairwise TKIP > /dev/null
		wpa_cli set_network $net group TKIP > /dev/null
	fi

	wpa_cli set_network $net psk "\"$psk\"" > /dev/null
}

wpa_connect() {
	local net=""
	local ss="$1"
	local tmpfile=$(mktemp /tmp/$$.XXX.$ss.scan)
	local psk=""
	local newnet=0

	trap 'rm -f $tmpfile' EXIT INT TERM

        echo "Connecting to '$ss'"
	net=$(wpa_cli list_networks|gawk -f $LISTPARSER|egrep ":\"$ss\""|gawk -F: '{print $1}')
	if [ -n "$net"  ];then
		echo "Found existing wpa_cli config for '$ss', enabling network ${net}"
	else
		echo "No existing config for '$ss', creating"
		wpa_cli scan
		stty -echo
		printf "Passphrase for '$ss' (<ENTER> for passwordless):"
		read psk
		stty echo
		printf "\n"
		wpa_cli scan_results > $tmpfile
		us=$(egrep "\b$ss$" $tmpfile)

		if [ $? -ne 0 ]; then scan_hidden $tmpfile "$ss"; fi

		net=$(wpa_cli add_network|tail -1)
		wpa_cli set_network $net ssid "\"$ss\"" > /dev/null

		echo $us|egrep -q 'WPA2?-PSK'
		if [ $? -eq 0 ];then
			wpa_cli set_network $net key_mgmt WPA-PSK > /dev/null
			wpa_encrypt "$us" "$net" "$psk"
		else
			wpa_cli set_network $net key_mgmt NONE > /dev/null
		fi
		newnet=1
	fi

	echo "Enabling '$ss'"
	wpa_cli select_network $net > /dev/null

	if [ $newnet -eq 1 ]; then save_config; fi

	sleep 2
	wpa_cli status
}

connect() {
	local ssid="$1"
	if [ -n "$ssid" ];then
		wpa_connect "$ssid"
	else
		echo "Connecting to the best damn thing we can find"
		lst=$(list $dev|tail -n+3|grep -v 'HIDDEN'|head -1)
		echo "Trying $lst"
	        wpa_connect "$lst"
	fi
}


while getopts ":d:h" opt; do
	case $opt in
		d) DEV=$OPTARG
	           shift 2
		   ;;
		\?) echo "Invalid Option: -$OPTARG" >&2
		    usage
		    exit 1
		    ;;
		:)  echo "Option -$OPTARG requires an argument" >&2
		    usage
		    exit 1
		    ;;
	        h) usage
		   exit
		   ;;
	esac
done

COMMAND=$1

case $COMMAND in
	list|"") list
	      ;;
	connect) shift
		 connect "$@"
		 ;;
        *) echo Unsupported operation: $COMMAND >&2
	   usage
	   exit 88
	   ;;
esac
