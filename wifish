#!/bin/sh
: ${AWK_LOCATION:="/var/lib/wifish"}
if [ ! -r "${AWK_LOCATION}"/wscanparse.awk ];then
	echo "WARNING: Unable to find wscanparse.awk at ${AWK_LOCATION}, trying in ./awk" >&2
	AWK_LOCATION=./awk
fi

if [ ! -r "${AWK_LOCATION}"/wscanparse.awk ];then
	echo "FATAL: Unable to find wscanparse.awk in ./awk Please set AWK_LOCATION" >&2
	exit 1
fi

PARSER="${AWK_LOCATION}"/wscanparse.awk
LISTPARSER="${AWK_LOCATION}"/wlistparse.awk

usage() {
cat	<<-HERE
$0 [options] COMMAND [arguments]
  Options:
        -h		This Help

  Commands: 
        list		List Available APs
        connect	<SSID>	Connect to an AP

  Example:
        $0 connect SomeSSID
	HERE
}

list() {
	echo " * Scanning For APs ..."
	if [ -n "$_IN_TEST" ];then
                gawk -f "$PARSER" data/wscan.txt
	else
		wpa_cli scan > /dev/null
		sleep 5
		wpa_cli scan_results|sort -k 3|gawk -f "$PARSER"
	fi
}

save_config() {
	_yesno=""
	printf "Do you want to save this connection? (y/N): "
	read yesno
	echo
	echo $_yesno|egrep -q '^[Yy]'
	if [ $? -eq 0 ];then
		printf "Saving wpa_supplicant config.. "
		wpa_cli save_config|tail -1
	fi
	unset _yesno
}

scan_hidden() {
	_tfile=$1
	_ssid=$2
	_yesno=""
	cat $_tfile
	printf "WARNING: Cannot find '$_ssid' in scan results, if it's hidden we can continue. Continue? (y/N): "
	read yesno
	echo $_yesno|egrep -q '^[Yy]'
	if [ $? -eq 0 ];then
		echo "Ok, your call"
	else
		echo "Ok, Bailing now"
		exit 1
	fi
	unset _tfile _ssid _yesno
}

wpa_encrypt() {
	__us="$1"
	__net="$2"
	__psk="$3"
	_res=1
	echo $__us|egrep -q 'WPA2-PSK'
	_res=$?
	if [ $_res -eq 0 ];then
		wpa_cli set_network $__net proto WPA2 > /dev/null
	else
		echo $__us|egrep -q 'WPA-PSK'
		if [ $? -eq 0 ];then
			wpa_cli set_network $__net proto WPA > /dev/null
		fi
	fi

	echo $__us|grep -q 'TKIP'
	if [ $? -eq 0 ];then
		wpa_cli set_network $__net pairwise TKIP > /dev/null
		wpa_cli set_network $__net group TKIP > /dev/null
	fi

	wpa_cli set_network $__net psk "\"$__psk\"" > /dev/null
	unset __us __net __psk __res
}

wpa_connect() {
	_ss="$1"
	scan_tmpfile=$(mktemp /tmp/$$.XXX.$_ss.scan)
	_newnet=0

	trap 'rm -f $scan_tmpfile' EXIT INT TERM

        echo "Connecting to '$_ss'"
	_net=$(wpa_cli list_networks|gawk -f $LISTPARSER|egrep ":\"$_ss\""|gawk -F: '{print $1}')
	if [ -n "$_net"  ];then
		echo "Found existing wpa_cli config for '$_ss', enabling network ${net}"
	else
		echo "No existing config for '$_ss', creating"
		wpa_cli scan
		stty -echo
		printf "Passphrase for '$_ss' (<ENTER> for passwordless):"
		read _psk
		stty echo
		printf "\n"
		wpa_cli scan_results > $scan_tmpfile
		_us=$(egrep "\b$_ss$" $scan_tmpfile)

		if [ $? -ne 0 ]; then scan_hidden $scan_tmpfile "$_ss"; fi

		_net=$(wpa_cli add_network|tail -1)
		wpa_cli set_network $net ssid "\"$_ss\"" > /dev/null

		echo $_us|egrep -q 'WPA2?-PSK'
		if [ $? -eq 0 ];then
			wpa_cli set_network $_net key_mgmt WPA-PSK > /dev/null
			wpa_encrypt "$_us" "$_net" "$_psk"
		else
			wpa_cli set_network $_net key_mgmt NONE > /dev/null
		fi
		_newnet=1
	fi

        rm $scan_tmpfile
	echo "Enabling '$_ss'"
	wpa_cli select_network $_net > /dev/null

	if [ $_newnet -eq 1 ]; then save_config; fi

	sleep 2
	wpa_cli status
	unset _net _ss _psk _newnet
}

connect() {
	ssid=$1
	if [ -n "$ssid" ];then
		wpa_connect "$ssid"
	else
		echo "Connecting to the best damn thing we can find"
		lst=$(list|tail -n+3|grep -v 'HIDDEN'|head -1)
		echo "$lst"
		for s in $lst;do
			ssid=$(echo $s|tr -d '"')
			break
		done
		echo "Trying '$ssid'"
	        wpa_connect "$ssid"
	fi
}


while getopts ":h" opt; do
	case $opt in
		\?) echo "Invalid Option: -$OPTARG" >&2
		    usage
		    exit 1
		    ;;
		:)  echo "Option -$OPTARG requires an argument" >&2
		    usage
		    exit 1
		    ;;
	        h) usage
		   exit
		   ;;
	esac
done

COMMAND=$1

case $COMMAND in
	list|"") list
	      ;;
	connect) shift
		 connect "$@"
		 ;;
        *) echo Unsupported operation: $COMMAND >&2
	   usage
	   exit 88
	   ;;
esac
